#!/bin/bash
# Insert the stylesheet into the email.

### Derive filterInsertSheet.
# Look for "<head>" (or similar). Replace it with "<head>" followed by code to insert the stylesheet. There are some comments inserted as well to make it easier to update the inserted code, or even remove it in the future.
filterInsertSheet="s/<head><!-- Inserted stylesheet using kmailMessageDarkMode.*END OF kmailMessageDarkMode -->/<head>/g;s#<[hH][eE][aA][dD]>#<head><!-- Inserted stylesheet using kmailMessageDarkMode at $(date) --><link rel=\"stylesheet\" href=\"/var/lib/kmailMessageDarkMode/custom.css\"><!-- END OF kmailMessageDarkMode -->#g"



### Derive filterCleanColour.
# This is the hard bit, because we have to cope with all the inconsistency that has ever been conceived in hard-coding colours.
# As it currently is. The following not currently be undone A work around could be to replace these with non-existent attributes. Eg "color=" -> "disabledColor=". I haven't yet tested whether this will silently fail, and be fine. Or this will create more problems than it will solve.
# color:#000000;background-color:#FFFFFF

# Make bgcolor the same as color, then remove it. The first step saves duplication. 
reduceTheStuffWeNeedToMatch="s/\\(bgcolor\\|background-color\\|background\\)/color/g"

# What sorts of colours we look for. Eg #9999FF, bright-blue etc.
colorRepresentation="\\(#......\\|[A-Za-z]\\([A-Za-z]*-*\\)*\\)"

# CSS format.
cssBased="s/color *: *$colorRepresentation//g"

# HTML format.
htmlBased="s/color *= *\\(\"\\|'\\)*${colorRepresentation}\\(\"\\|'\\)*//g"

# Bring it together.
stuffWeNeedToMatch="$cssBased;$htmlBased"
filterCleanColour="$reduceTheStuffWeNeedToMatch;$stuffWeNeedToMatch"



### Derive filterAll.
# Combine everything together for the "all" option.
filterAll="${filterInsertSheet};${filterCleanColour}"



### Get on to normal flow.
# Default to all.
filterMethod='all'

# Load the user config if we have one.
if [ -e ~/.config/kmailMessageDarkModerc ]; then
    . ~/.config/kmailMessageDarkModerc
fi

# Override if there is an environment variable set. This is primarily intended for testing.
if [ "$FILTER_METHOD" != '' ]; then
    filterMethod="$FILTER_METHOD"
fi

# Get the selected filter.
shouldFixNewLines="false"
case "$filterMethod" in
    'insertSheet')
        filter="$filterInsertSheet"
    ;;
    'cleanColour')
        filter="$filterCleanColour"
        shouldFixNewLines="true"
    ;;
    'all')
        filter="$filterAll"
        shouldFixNewLines="true"
    ;;
    *)
        filter="$filterAll"
        shouldFixNewLines="true"
    ;;
esac

function doFilter
{
    sed "s/=3D/=/g;" | sed "$filter"
}

# Run the filter only if it is not disabled.
if [ "$filterMethod" != 'disable' ]; then
    if [ "$shouldFixNewLines" == 'true' ]; then
        useMunger=0
        mungeBuffer=''
        while IFS= read -r line;do
            if [[ "$line" =~ \<[Hh][Ee][Aa][Dd] ]] || [[ "$line" =~ \<[Bb][Oo][Dd][Yy] ]]; then
                # Turn it on.
                useMunger=1
            fi
            if [[ "$line" =~ \</[Bb][Oo][Dd][Yy] ]] || [[ "$line" =~ \</[Hh][Tt][Mm][Ll] ]]; then
                # Turn it off after this iteration. This is to handle one-liners.
                useMunger=2
            fi
            
            if [ "$useMunger" != 0 ]; then
                # Munge the input.
                if [ "${line: -1}" ==  '=' ]; then
                    mungeBuffer="${mungeBuffer}${line::-1}"
                else
                    mungeBuffer="${mungeBuffer}${line}\n"
                fi
            else
                echo "$line"
            fi
            
            
            if [ "$useMunger" == 2 ]; then
                # Turn off the munger now that we have finished this iteration, and send it through thefilter.
                useMunger=0
                echo -ne "$mungeBuffer" | doFilter
                mungeBuffer=''
            fi
        done
        
        if [ "$mungeBuffer" != '' ]; then
            # If we get here, there is still stuff left in the mungeBuffer, This could be that the closing tags are missing in the email. Or it could be a bug in this code.
            echo "<!-- ColouredWeb: Munge failure 000 - begin -->$mungeBuffer<!-- ColouredWeb: Munge failure 000 - end -->" | doFilter
            echo "<!-- ColouredWeb: Munge failure 000 - appendix -->"
        fi
    else
        sed "$filter"
    fi
fi
